rv64a
lr.d
lr.d rd, rs1
load a 64-bit data from the address in rs1, places the sign-extended value in rd, and registers a reservation on the memory address.
x[rd] = LoadReserved64(M[x[rs1]])
0101111
aZ
011
00010
t
sc.d
sc.d rd, rs1
write a 64-bit data in rs2 to the address in rs1, provided a valid reservation still exists on that address. SC writes zero to rd on success or a nonzero code on failure.
x[rd] = StoreConditional64(M[x[rs1]], x[rs2])
0101111
a
011
00011
t
amoswap.d
amoswap.d rd,rs2,(rs1)
atomically load a 64-bit signed data value from the address in rs1, place the value into register rd, swap the loaded value and the original 64-bit signed value in rs2, then store the result back to the address in rs1.
x[rd] = AMO64(M[x[rs1]] SWAP x[rs2])
0101111
a
011
00001
t
amoadd.d
amoadd.d rd,rs2,(rs1)
Atomically load a 64-bit signed data value from the address in rs1, place the value into register rd, apply add the loaded value and the original 64-bit signed value in rs2, then store the result back to the address in rs1.
x[rd] = AMO64(M[x[rs1]] + x[rs2])
0101111
a
011
00000
t
amoxor.d
amoxor.d rd,rs2,(rs1)
Atomically load a 64-bit signed data value from the address in rs1, place the value into register rd, apply exclusive or the loaded value and the original 64-bit signed value in rs2, then store the result back to the address in rs1.
x[rd] = AMO64(M[x[rs1]] ^ x[rs2])
0101111
a
011
00100
t
amoand.d
amoand.d rd,rs2,(rs1)
Atomically load a 64-bit signed data value from the address in rs1, place the value into register rd, apply and the loaded value and the original 64-bit signed value in rs2, then store the result back to the address in rs1.
x[rd] = AMO64(M[x[rs1]] & x[rs2])
0101111
a
011
01100
t
amoor.d
amoor.d rd,rs2,(rs1)
Atomically load a 64-bit signed data value from the address in rs1, place the value into register rd, apply or the loaded value and the original 64-bit signed value in rs2, then store the result back to the address in rs1.
x[rd] = AMO64(M[x[rs1]] | x[rs2])
0101111
a
011
01000
t
amomin.d
amomin.d rd,rs2,(rs1)
Atomically load a 64-bit signed data value from the address in rs1, place the value into register rd, apply min operator the loaded value and the original 64-bit signed value in rs2, then store the result back to the address in rs1.
x[rd] = AMO64(M[x[rs1]] MIN x[rs2])
0101111
a
011
10000
t
amomax.d
amomax.d rd,rs2,(rs1)
Atomically load a 64-bit signed data value from the address in rs1, place the value into register rd, apply max operator the loaded value and the original 64-bit signed value in rs2, then store the result back to the address in rs1.
x[rd] = AMO64(M[x[rs1]] MAX x[rs2])
0101111
a
011
10100
t
amominu.d
amominu.d rd,rs2,(rs1)
Atomically load a 64-bit unsigned data value from the address in rs1, place the value into register rd, apply unsigned min the loaded value and the original 64-bit unsigned value in rs2, then store the result back to the address in rs1.
x[rd] = AMO64(M[x[rs1]] MINU x[rs2])
0101111
a
011
11000
t
amomaxu.d
amomaxu.d rd,rs2,(rs1)
Atomically load a 64-bit unsigned data value from the address in rs1, place the value into register rd, apply unsigned max the loaded value and the original 64-bit unsigned value in rs2, then store the result back to the address in rs1.
x[rd] = AMO64(M[x[rs1]] MAXU x[rs2])
0101111
a
011
11100
f